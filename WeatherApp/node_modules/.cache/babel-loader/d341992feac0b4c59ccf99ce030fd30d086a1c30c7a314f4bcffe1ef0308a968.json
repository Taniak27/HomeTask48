{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  weatherData: null,\n  loading: false,\n  error: null\n};\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    fetchWeatherStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchWeatherSuccess: (state, action) => {\n      state.weatherData = action.payload;\n      state.loading = false;\n      state.error = null;\n    },\n    fetchWeatherFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  fetchWeatherStart,\n  fetchWeatherSuccess,\n  fetchWeatherFailure\n} = weatherSlice.actions;\nexport const fetchWeather = () => async dispatch => {\n  dispatch(fetchWeatherStart());\n  try {\n    const response = await axios.get('https://64de4020825d19d9bfb25ba1.mockapi.io/api/v1/weather');\n    dispatch(fetchWeatherSuccess(response.data));\n  } catch (error) {\n    dispatch(fetchWeatherFailure(error.message));\n  }\n};\nexport default weatherSlice.reducer;","map":{"version":3,"names":["createSlice","axios","initialState","weatherData","loading","error","weatherSlice","name","reducers","fetchWeatherStart","state","fetchWeatherSuccess","action","payload","fetchWeatherFailure","actions","fetchWeather","dispatch","response","get","data","message","reducer"],"sources":["/Users/user/Desktop/Weather/wether/src/redux/weatherSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst initialState = {\n  weatherData: null,\n  loading: false,\n  error: null,\n};\n\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    fetchWeatherStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchWeatherSuccess: (state, action) => {\n      state.weatherData = action.payload;\n      state.loading = false;\n      state.error = null;\n    },\n    fetchWeatherFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const {\n  fetchWeatherStart,\n  fetchWeatherSuccess,\n  fetchWeatherFailure,\n} = weatherSlice.actions;\n\nexport const fetchWeather = () => async dispatch => {\n  dispatch(fetchWeatherStart());\n  try {\n    const response = await axios.get('https://64de4020825d19d9bfb25ba1.mockapi.io/api/v1/weather');\n    dispatch(fetchWeatherSuccess(response.data));\n  } catch (error) {\n    dispatch(fetchWeatherFailure(error.message));\n  }\n};\n\nexport default weatherSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE,IAAI;EACjBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,YAAY,GAAGN,WAAW,CAAC;EAC/BO,IAAI,EAAE,SAAS;EACfL,YAAY;EACZM,QAAQ,EAAE;IACRC,iBAAiB,EAAEC,KAAK,IAAI;MAC1BA,KAAK,CAACN,OAAO,GAAG,IAAI;MACpBM,KAAK,CAACL,KAAK,GAAG,IAAI;IACpB,CAAC;IACDM,mBAAmB,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MACtCF,KAAK,CAACP,WAAW,GAAGS,MAAM,CAACC,OAAO;MAClCH,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACL,KAAK,GAAG,IAAI;IACpB,CAAC;IACDS,mBAAmB,EAAEA,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACtCF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXJ,iBAAiB;EACjBE,mBAAmB;EACnBG;AACF,CAAC,GAAGR,YAAY,CAACS,OAAO;AAExB,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM,MAAMC,QAAQ,IAAI;EAClDA,QAAQ,CAACR,iBAAiB,CAAC,CAAC,CAAC;EAC7B,IAAI;IACF,MAAMS,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,4DAA4D,CAAC;IAC9FF,QAAQ,CAACN,mBAAmB,CAACO,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC9C,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdY,QAAQ,CAACH,mBAAmB,CAACT,KAAK,CAACgB,OAAO,CAAC,CAAC;EAC9C;AACF,CAAC;AAED,eAAef,YAAY,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}